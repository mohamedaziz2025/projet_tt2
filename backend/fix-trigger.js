const mysql = require('mysql2/promise');

async function removeTriggerPermanently() {
  let connection;
  try {
    // Connexion MySQL
    connection = await mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: '',
      database: 'queue_management'
    });
    
    console.log('üîç V√©rification des triggers existants...');
    const [triggers] = await connection.execute(`
      SELECT TRIGGER_NAME, EVENT_MANIPULATION, EVENT_OBJECT_TABLE 
      FROM information_schema.TRIGGERS 
      WHERE TRIGGER_SCHEMA = 'queue_management'
    `);
    
    console.log('üìã Triggers trouv√©s:', triggers);
    
    // Supprimer le trigger probl√©matique (utiliser query au lieu d'execute pour DDL)
    await connection.query('DROP TRIGGER IF EXISTS update_queue_position');
    console.log('‚úÖ Trigger update_queue_position supprim√© d√©finitivement');
    
    // V√©rifier qu'il est supprim√©
    const [remainingTriggers] = await connection.execute(`
      SELECT TRIGGER_NAME FROM information_schema.TRIGGERS 
      WHERE TRIGGER_SCHEMA = 'queue_management'
    `);
    
    console.log('üìã Triggers restants:', remainingTriggers);
    
    // Test de mise √† jour pour v√©rifier
    await connection.execute('UPDATE tickets SET status = "test" WHERE id = 1');
    await connection.execute('UPDATE tickets SET status = "en_attente" WHERE id = 1');
    console.log('‚úÖ Test de mise √† jour r√©ussi sans trigger');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîö Connexion ferm√©e');
    }
  }
}

// Ex√©cuter la fonction
removeTriggerPermanently();
