const mysql = require('mysql2/promise');

async function testServiceFieldsMapping() {
  let connection;
  try {
    console.log('üß™ TEST PRATIQUE - CHAMPS SERVICES');
    console.log('=' .repeat(60));
    
    connection = await mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: '',
      database: 'queue_management'
    });
    
    // 1. Structure actuelle de la DB
    console.log('\n1Ô∏è‚É£  STRUCTURE ACTUELLE DB:');
    const [structure] = await connection.execute('DESCRIBE services');
    structure.forEach(col => {
      console.log(`   ‚Ä¢ ${col.Field}: ${col.Type} ${col.Null === 'YES' ? '(nullable)' : '(required)'}`);
    });
    
    // 2. Donn√©es existantes 
    console.log('\n2Ô∏è‚É£  SERVICE EXISTANT (brut DB):');
    const [services] = await connection.execute('SELECT * FROM services WHERE id = 1');
    const serviceDb = services[0];
    console.log('   üìã Donn√©es DB:', JSON.stringify(serviceDb, null, 2));
    
    // 3. Simulation du mapping DB ‚Üí Frontend
    console.log('\n3Ô∏è‚É£  MAPPING DB ‚Üí FRONTEND:');
    const frontendFormat = {
      id: serviceDb.id,
      nom: serviceDb.nom,                          // ‚úÖ EXISTE
      description: serviceDb.description,          // ‚úÖ EXISTE  
      dureeEstimee: serviceDb.duree_moyenne,       // üîÑ MAPP√â (duree_moyenne ‚Üí dureeEstimee)
      status: serviceDb.active ? 'active' : 'disabled',  // üîÑ CONVERTI (1/0 ‚Üí active/disabled)
      
      // ‚ùå CHAMPS MANQUANTS - VALEURS PAR D√âFAUT:
      icon: 'üõéÔ∏è',                                 // Frontend attend icon
      couleur: '#c41e3a',                         // Frontend attend couleur
      priority: 2,                                // Frontend attend priority
      prerequis: '',                             // Frontend attend prerequis
      documentsNecessaires: ''                    // Frontend attend documentsNecessaires
    };
    
    console.log('   üé® Format Frontend:', JSON.stringify(frontendFormat, null, 2));
    
    // 4. Simulation de donn√©es Frontend ‚Üí DB
    console.log('\n4Ô∏è‚É£  TEST SOUMISSION FRONTEND ‚Üí DB:');
    const frontendSubmission = {
      nom: 'Nouveau Service Test',
      description: 'Service cr√©√© via frontend',
      icon: 'üì±',                    // ‚ùå Sera ignor√©
      couleur: '#ff0000',            // ‚ùå Sera ignor√©  
      dureeEstimee: 25,             // üîÑ ‚Üí duree_moyenne
      priority: 1,                  // ‚ùå Sera ignor√©
      status: 'active',             // üîÑ ‚Üí active = 1
      prerequis: 'Avoir CIN',       // ‚ùå Sera ignor√©
      documentsNecessaires: 'CIN, Facture'  // ‚ùå Sera ignor√©
    };
    
    console.log('   üìù Donn√©es Frontend:', JSON.stringify(frontendSubmission, null, 2));
    
    // Mapping pour DB
    const dbData = {
      nom: frontendSubmission.nom,
      description: frontendSubmission.description,
      duree_moyenne: frontendSubmission.dureeEstimee,
      active: frontendSubmission.status === 'active' ? 1 : 0
      // icon, couleur, priority, prerequis, documentsNecessaires ‚Üí PERDUS!
    };
    
    console.log('   üíæ Donn√©es pour DB:', JSON.stringify(dbData, null, 2));
    
    // 5. Analyse des pertes
    console.log('\n5Ô∏è‚É£  ANALYSE DES PERTES DE DONN√âES:');
    const champsIgnores = ['icon', 'couleur', 'priority', 'prerequis', 'documentsNecessaires'];
    console.log('   ‚ùå Champs frontend IGNOR√âS lors de la sauvegarde:');
    champsIgnores.forEach(champ => {
      console.log(`      ‚Ä¢ ${champ}: "${frontendSubmission[champ]}" ‚Üí PERDU`);
    });
    
    // 6. Test r√©el d'insertion 
    console.log('\n6Ô∏è‚É£  TEST R√âEL D\'INSERTION:');
    try {
      await connection.execute('DELETE FROM services WHERE nom = ?', ['Nouveau Service Test']);
      
      const [result] = await connection.execute(
        'INSERT INTO services (nom, description, duree_moyenne, active) VALUES (?, ?, ?, ?)',
        [dbData.nom, dbData.description, dbData.duree_moyenne, dbData.active]
      );
      
      console.log(`   ‚úÖ Service ins√©r√© avec ID: ${result.insertId}`);
      
      // R√©cup√©rer le service ins√©r√©
      const [inserted] = await connection.execute('SELECT * FROM services WHERE id = ?', [result.insertId]);
      console.log('   üìã Service r√©cup√©r√©:', JSON.stringify(inserted[0], null, 2));
      
      // Nettoyer
      await connection.execute('DELETE FROM services WHERE id = ?', [result.insertId]);
      console.log('   üßπ Service de test supprim√©');
      
    } catch (error) {
      console.log('   ‚ùå Erreur insertion:', error.message);
    }
    
    // 7. R√©sum√©
    console.log('\n7Ô∏è‚É£  R√âSUM√â:');
    console.log('   ‚úÖ CHAMPS QUI FONCTIONNENT:');
    console.log('      ‚Ä¢ nom (direct)');
    console.log('      ‚Ä¢ description (direct)');
    console.log('      ‚Ä¢ dureeEstimee ‚Üî duree_moyenne (mapping)');
    console.log('      ‚Ä¢ status ‚Üî active (conversion)');
    
    console.log('   ‚ùå CHAMPS PERDUS:');
    console.log('      ‚Ä¢ icon (personnalisation d\'ic√¥ne)');
    console.log('      ‚Ä¢ couleur (th√®me de couleur)');
    console.log('      ‚Ä¢ priority (niveau de priorit√©)');
    console.log('      ‚Ä¢ prerequis (pr√©requis du service)');
    console.log('      ‚Ä¢ documentsNecessaires (documents requis)');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîö Test termin√©');
    }
  }
}

// Lancer le test
testServiceFieldsMapping();
