const { sequelize } = require('./models');

async function checkDatabaseStructure() {
  try {
    console.log('üîç V√©rification de la structure de la base de donn√©es...');
    
    // Obtenir la liste des tables
    const [tables] = await sequelize.query("SELECT name FROM sqlite_master WHERE type='table';");
    console.log('üìã Tables trouv√©es:', tables.map(t => t.name));
    
    // V√©rifier la structure de la table Tickets si elle existe
    if (tables.some(t => t.name === 'Tickets')) {
      console.log('\nüìä Structure de la table Tickets:');
      const [columns] = await sequelize.query("PRAGMA table_info(Tickets);");
      columns.forEach(col => {
        console.log(`- ${col.name}: ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.pk ? 'PRIMARY KEY' : ''}`);
      });
    }
    
    // V√©rifier la structure de la table agences si elle existe
    if (tables.some(t => t.name === 'agences')) {
      console.log('\nüè¢ Structure de la table agences:');
      const [columns] = await sequelize.query("PRAGMA table_info(agences);");
      columns.forEach(col => {
        console.log(`- ${col.name}: ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.pk ? 'PRIMARY KEY' : ''}`);
      });
    }
    
    // V√©rifier la structure de la table services si elle existe
    if (tables.some(t => t.name === 'services')) {
      console.log('\nüîß Structure de la table services:');
      const [columns] = await sequelize.query("PRAGMA table_info(services);");
      columns.forEach(col => {
        console.log(`- ${col.name}: ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.pk ? 'PRIMARY KEY' : ''}`);
      });
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  }
}

checkDatabaseStructure();
